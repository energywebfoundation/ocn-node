package snc.openchargingnetwork.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes2;
import org.web3j.abi.datatypes.generated.Bytes3;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class Permissions extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50604051613c39380380613c398339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050613ba5806100946000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80635c0f93bb11610097578063c13489ca11610066578063c13489ca14610780578063cdebf96e14610966578063dc3acebe146109aa578063edc922a914610bab576100f5565b80635c0f93bb1461058d578063674a730d146105f2578063884eb949146106c0578063b5d9f61f14610704576100f5565b8063340f1e7c116100d3578063340f1e7c146103bc57806338f7e0e1146104215780633fd62464146104ba57806350f3fc811461051f576100f5565b8063099e9762146100fa5780631cf939261461030157806323db5e8c1461030b575b600080fd5b6102ff600480360360c081101561011057600080fd5b810190808035906020019064010000000081111561012d57600080fd5b82018360208201111561013f57600080fd5b8035906020019184600183028401116401000000008311171561016157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156101c457600080fd5b8201836020820111156101d657600080fd5b803590602001918460018302840111640100000000831117156101f857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561025b57600080fd5b82018360208201111561026d57600080fd5b8035906020019184602083028401116401000000008311171561028f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803560ff1690602001909291908035906020019092919080359060200190929190505050610c0a565b005b610309610e37565b005b6103a26004803603606081101561032157600080fd5b8101908080357dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919080357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e42565b604051808215151515815260200191505060405180910390f35b61041f600480360360808110156103d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff16906020019092919080359060200190929190803590602001909291905050506112ae565b005b6104636004803603602081101561043757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611433565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104a657808201518184015260208101905061048b565b505050509050019250505060405180910390f35b61051d600480360360808110156104d057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff1690602001909291908035906020019092919080359060200190929190505050611500565b005b61054b6004803603602081101561053557600080fd5b8101908080359060200190929190505050611684565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105f0600480360360808110156105a357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff16906020019092919080359060200190929190803590602001909291905050506116c0565b005b6106696004803603604081101561060857600080fd5b8101908080357dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919080357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050611845565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156106ac578082015181840152602081019050610691565b505050509050019250505060405180910390f35b610702600480360360208110156106d657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ceb565b005b6107666004803603604081101561071a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cf8565b604051808215151515815260200191505060405180910390f35b6109646004803603606081101561079657600080fd5b81019080803590602001906401000000008111156107b357600080fd5b8201836020820111156107c557600080fd5b803590602001918460018302840111640100000000831117156107e757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561084a57600080fd5b82018360208201111561085c57600080fd5b8035906020019184600183028401116401000000008311171561087e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156108e157600080fd5b8201836020820111156108f357600080fd5b8035906020019184602083028401116401000000008311171561091557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611d8c565b005b6109a86004803603602081101561097c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d9d565b005b6109ec600480360360208110156109c057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611daa565b60405180867dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001857cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610ac2578082015181840152602081019050610aa7565b50505050905090810190601f168015610aef5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015610b28578082015181840152602081019050610b0d565b50505050905090810190601f168015610b555780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019060200280838360005b83811015610b91578082015181840152602081019050610b76565b505050509050019850505050505050505060405180910390f35b610bb361238d565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610bf6578082015181840152602081019050610bdb565b505050509050019250505060405180910390f35b60008686866040516020018084805190602001908083835b60208310610c455780518252602082019150602081019050602083039250610c22565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b60208310610c965780518252602082019150602081019050602083039250610c73565b6001836020036101000a038019825116818451168082178552505050505050905001828051906020019060200280838360005b83811015610ce4578082015181840152602081019050610cc9565b505050509050019350505050604051602081830303815290604052805190602001209050600060016040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250836040516020018083805190602001908083835b60208310610d795780518252602082019150602081019050602083039250610d56565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040528051906020012086868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610e15573d6000803e3d6000fd5b505050602060405103519050610e2d8189898961241b565b5050505050505050565b610e4033612a17565b565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5b5ffbb86866040518363ffffffff1660e01b815260040180837dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001827cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019250505060006040518083038186803b158015610f4157600080fd5b505afa158015610f55573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060c0811015610f7f57600080fd5b810190808051906020019092919080516040519392919084640100000000821115610fa957600080fd5b83820191506020820185811115610fbf57600080fd5b8251866020820283011164010000000082111715610fdc57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015611013578082015181840152602081019050610ff8565b505050509050016040526020018051604051939291908464010000000082111561103c57600080fd5b8382019150602082018581111561105257600080fd5b825186602082028301116401000000008211171561106f57600080fd5b8083526020830192505050908051906020019060200280838360005b838110156110a657808201518184015260208101905061108b565b50505050905001604052602001805160405193929190846401000000008211156110cf57600080fd5b838201915060208201858111156110e557600080fd5b825186602082028301116401000000008211171561110257600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561113957808201518184015260208101905061111e565b50505050905001604052602001805190602001909291908051604051939291908464010000000082111561116c57600080fd5b8382019150602082018581111561118257600080fd5b825186600182028301116401000000008211171561119f57600080fd5b8083526020830192505050908051906020019080838360005b838110156111d35780820151818401526020810190506111b8565b50505050905090810190601f1680156112005780820380516001836020036101000a031916815260200191505b5060405250505090919293509091925090915090505080915050600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169150509392505050565b600084604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401915050604051602081830303815290604052805190602001209050600060016040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250836040516020018083805190602001908083835b602083106113795780518252602082019150602081019050602083039250611356565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040528051906020012086868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611415573d6000803e3d6000fd5b50505060206040510351905061142b8187612e56565b505050505050565b6060600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156114f457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116114aa575b50505050509050919050565b600084604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401915050604051602081830303815290604052805190602001209050600060016040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250836040516020018083805190602001908083835b602083106115cb57805182526020820191506020810190506020830392506115a8565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040528051906020012086868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611667573d6000803e3d6000fd5b50505060206040510351905061167c81612a17565b505050505050565b6001818154811061169157fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600084604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401915050604051602081830303815290604052805190602001209050600060016040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250836040516020018083805190602001908083835b6020831061178b5780518252602082019150602081019050602083039250611768565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040528051906020012086868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611827573d6000803e3d6000fd5b50505060206040510351905061183d8187613402565b505050505050565b606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5b5ffbb85856040518363ffffffff1660e01b815260040180837dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001827cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019250505060006040518083038186803b15801561194557600080fd5b505afa158015611959573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060c081101561198357600080fd5b8101908080519060200190929190805160405193929190846401000000008211156119ad57600080fd5b838201915060208201858111156119c357600080fd5b82518660208202830111640100000000821117156119e057600080fd5b8083526020830192505050908051906020019060200280838360005b83811015611a175780820151818401526020810190506119fc565b5050505090500160405260200180516040519392919084640100000000821115611a4057600080fd5b83820191506020820185811115611a5657600080fd5b8251866020820283011164010000000082111715611a7357600080fd5b8083526020830192505050908051906020019060200280838360005b83811015611aaa578082015181840152602081019050611a8f565b5050505090500160405260200180516040519392919084640100000000821115611ad357600080fd5b83820191506020820185811115611ae957600080fd5b8251866020820283011164010000000082111715611b0657600080fd5b8083526020830192505050908051906020019060200280838360005b83811015611b3d578082015181840152602081019050611b22565b505050509050016040526020018051906020019092919080516040519392919084640100000000821115611b7057600080fd5b83820191506020820185811115611b8657600080fd5b8251866001820283011164010000000082111715611ba357600080fd5b8083526020830192505050908051906020019080838360005b83811015611bd7578082015181840152602081019050611bbc565b50505050905090810190601f168015611c045780820380516001836020036101000a031916815260200191505b5060405250505090919293509091925090915090505080915050600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611cdd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611c93575b505050505091505092915050565b611cf53382612e56565b50565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611d983384848461241b565b505050565b611da73382613402565b50565b60008060608060606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df516128876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b158015611e5057600080fd5b505afa158015611e64573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060e0811015611e8e57600080fd5b81019080805190602001909291908051906020019092919080516040519392919084640100000000821115611ec257600080fd5b83820191506020820185811115611ed857600080fd5b8251866020820283011164010000000082111715611ef557600080fd5b8083526020830192505050908051906020019060200280838360005b83811015611f2c578082015181840152602081019050611f11565b5050505090500160405260200180516040519392919084640100000000821115611f5557600080fd5b83820191506020820185811115611f6b57600080fd5b8251866020820283011164010000000082111715611f8857600080fd5b8083526020830192505050908051906020019060200280838360005b83811015611fbf578082015181840152602081019050611fa4565b5050505090500160405260200180516040519392919084640100000000821115611fe857600080fd5b83820191506020820185811115611ffe57600080fd5b825186602082028301116401000000008211171561201b57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015612052578082015181840152602081019050612037565b50505050905001604052602001805190602001909291908051604051939291908464010000000082111561208557600080fd5b8382019150602082018581111561209b57600080fd5b82518660018202830111640100000000821117156120b857600080fd5b8083526020830192505050908051906020019080838360005b838110156120ec5780820151818401526020810190506120d1565b50505050905090810190601f1680156121195780820380516001836020036101000a031916815260200191505b506040525050509091929350909192509091509050508095508196505050600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561220d5780601f106121e25761010080835404028352916020019161220d565b820191906000526020600020905b8154815290600101906020018083116121f057829003601f168201915b50505050509250600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122ea5780601f106122bf576101008083540402835291602001916122ea565b820191906000526020600020905b8154815290600101906020018083116122cd57829003601f168201915b50505050509150600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020180548060200260200160405190810160405280929190818152602001828054801561237d57602002820191906000526020600020905b815481526020019060010190808311612369575b5050505050905091939590929450565b6060600180548060200260200160405190810160405280929190818152602001828054801561241157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116123c7575b5050505050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166388cf72a0866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b1580156124bb57600080fd5b505afa1580156124cf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060408110156124f957600080fd5b81019080805190602001909291908051604051939291908464010000000082111561252357600080fd5b8382019150602082018581111561253957600080fd5b825186600182028301116401000000008211171561255657600080fd5b8083526020830192505050908051906020019080838360005b8381101561258a57808201518184015260208101905061256f565b50505050905090810190601f1680156125b75780820380516001836020036101000a031916815260200191505b50604052505050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603c815260200180613b35603c913960400191505060405180910390fd5b60008251116126be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4e6f207065726d697373696f6e7320676976656e2e000000000000000000000081525060200191505060405180910390fd5b604051806060016040528085815260200184815260200183815250600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908051906020019061273492919061390b565b50602082015181600101908051906020019061275192919061390b565b50604082015181600201908051906020019061276e92919061398b565b5090505060001515600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141561288a5760018590806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f5217645fd1a5d80a7a561ee8df6541e94bff9b1151d8c1281e17c1a304d9d6fa84848488604051808060200180602001806020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848103845288818151815260200191508051906020019080838360005b8381101561292957808201518184015260208101905061290e565b50505050905090810190601f1680156129565780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360005b8381101561298f578082015181840152602081019050612974565b50505050905090810190601f1680156129bc5780820380516001836020036101000a031916815260200191505b50848103825286818151815260200191508051906020019060200280838360005b838110156129f85780820151818401526020810190506129dd565b5050505090500197505050505050505060405180910390a15050505050565b60011515600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514612ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613ab26026913960400191505060405180910390fd5b612ac86139d8565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612bab5780601f10612b8057610100808354040283529160200191612bab565b820191906000526020600020905b815481529060010190602001808311612b8e57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c4d5780601f10612c2257610100808354040283529160200191612c4d565b820191906000526020600020905b815481529060010190602001808311612c3057829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015612ca557602002820191906000526020600020905b815481526020019060010190808311612c91575b5050505050815250509050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000612d0091906139f9565b600182016000612d1091906139f9565b600282016000612d209190613a41565b50506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f5217645fd1a5d80a7a561ee8df6541e94bff9b1151d8c1281e17c1a304d9d6fa816040015183604051808060200180602001806020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848103845260008152602001602001848103835260008152602001602001848103825286818151815260200191508051906020019060200280838360005b83811015612e3c578082015181840152602081019050612e21565b505050509050019550505050505060405180910390a15050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166388cf72a0846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b158015612ef657600080fd5b505afa158015612f0a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506040811015612f3457600080fd5b810190808051906020019092919080516040519392919084640100000000821115612f5e57600080fd5b83820191506020820185811115612f7457600080fd5b8251866001820283011164010000000082111715612f9157600080fd5b8083526020830192505050908051906020019080838360005b83811015612fc5578082015181840152602081019050612faa565b50505050905090810190601f168015612ff25780820380516001836020036101000a031916815260200191505b50604052505050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613082576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613a88602a913960400191505060405180910390fd5b60011515600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514613148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f50726f766964657220686173206e6f2072656769737465726564204170702e0081525060200191505060405180910390fd5b60001515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461322e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613ad86031913960400191505060405180910390fd5b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550507f59c05fe4657968f976c095206514e77e8ed37c2fe56e7614cd8f245dfbb008298383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166388cf72a0846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b1580156134a257600080fd5b505afa1580156134b6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060408110156134e057600080fd5b81019080805190602001909291908051604051939291908464010000000082111561350a57600080fd5b8382019150602082018581111561352057600080fd5b825186600182028301116401000000008211171561353d57600080fd5b8083526020830192505050908051906020019080838360005b83811015613571578082015181840152602081019050613556565b50505050905090810190601f16801561359e5780820380516001836020036101000a031916815260200191505b50604052505050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561362e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613a88602a913960400191505060405180910390fd5b60011515600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146136f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f50726f766964657220686173206e6f2072656769737465726564204170702e0081525060200191505060405180910390fd5b60011515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146137da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613b09602c913960400191505060405180910390fd5b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f59c05fe4657968f976c095206514e77e8ed37c2fe56e7614cd8f245dfbb008298383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061394c57805160ff191683800117855561397a565b8280016001018555821561397a579182015b8281111561397957825182559160200191906001019061395e565b5b5090506139879190613a62565b5090565b8280548282559060005260206000209081019282156139c7579160200282015b828111156139c65782518255916020019190600101906139ab565b5b5090506139d49190613a62565b5090565b60405180606001604052806060815260200160608152602001606081525090565b50805460018160011615610100020316600290046000825580601f10613a1f5750613a3e565b601f016020900490600052602060002090810190613a3d9190613a62565b5b50565b5080546000825590600052602060002090810190613a5f9190613a62565b50565b613a8491905b80821115613a80576000816000905550600101613a68565b5090565b9056fe417070207573657220686173206e6f207061727479206c697374696e6720696e2052656769737472792e43616e6e6f742064656c65746520617070207468617420646f6573206e6f742065786973742e41677265656d656e7420616c7265616479206d616465206265747765656e207573657220616e642070726f76696465722e4e6f2041677265656d656e74206d616465206265747765656e207573657220616e642070726f76696465722e547279696e6720746f20726567697374657220616e2061707020776974686f7574207061727479206c697374696e6720696e2052656769737472792ea265627a7a7231582022ad71273afc23e7112660d5d26832ec62d291dd2e9f14b7f6a1701451f9940964736f6c634300050f0032";

    public static final String FUNC_PROVIDERS = "providers";

    public static final String FUNC_SETAPP = "setApp";

    public static final String FUNC_SETAPPRAW = "setAppRaw";

    public static final String FUNC_GETAPP = "getApp";

    public static final String FUNC_DELETEAPP = "deleteApp";

    public static final String FUNC_DELETEAPPRAW = "deleteAppRaw";

    public static final String FUNC_GETPROVIDERS = "getProviders";

    public static final String FUNC_CREATEAGREEMENT = "createAgreement";

    public static final String FUNC_CREATEAGREEMENTRAW = "createAgreementRaw";

    public static final String FUNC_REVOKEAGREEMENT = "revokeAgreement";

    public static final String FUNC_REVOKEAGREEMENTRAW = "revokeAgreementRaw";

    public static final String FUNC_GETUSERAGREEMENTSBYADDRESS = "getUserAgreementsByAddress";

    public static final String FUNC_GETUSERAGREEMENTSBYOCPI = "getUserAgreementsByOcpi";

    public static final String FUNC_HASUSERAGREEMENTBYADDRESS = "hasUserAgreementByAddress";

    public static final String FUNC_HASUSERAGREEMENTBYOCPI = "hasUserAgreementByOcpi";

    public static final Event APPAGREEMENT_EVENT = new Event("AppAgreement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event APPUPDATE_EVENT = new Event("AppUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Address>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("73799", "0xB02f333b9E32EFCdE0394373C39f5d59fBDB2A0F");
        _addresses.put("9", "0x75c35C980C0d37ef46DF04d31A140b65503c0eEd");
    }

    @Deprecated
    protected Permissions(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Permissions(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Permissions(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Permissions(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AppAgreementEventResponse> getAppAgreementEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPAGREEMENT_EVENT, transactionReceipt);
        ArrayList<AppAgreementEventResponse> responses = new ArrayList<AppAgreementEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppAgreementEventResponse typedResponse = new AppAgreementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.provider = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppAgreementEventResponse> appAgreementEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AppAgreementEventResponse>() {
            @Override
            public AppAgreementEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPAGREEMENT_EVENT, log);
                AppAgreementEventResponse typedResponse = new AppAgreementEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.provider = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AppAgreementEventResponse> appAgreementEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPAGREEMENT_EVENT));
        return appAgreementEventFlowable(filter);
    }

    public List<AppUpdateEventResponse> getAppUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPUPDATE_EVENT, transactionReceipt);
        ArrayList<AppUpdateEventResponse> responses = new ArrayList<AppUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppUpdateEventResponse typedResponse = new AppUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.url = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.permissions = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.provider = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppUpdateEventResponse> appUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AppUpdateEventResponse>() {
            @Override
            public AppUpdateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPUPDATE_EVENT, log);
                AppUpdateEventResponse typedResponse = new AppUpdateEventResponse();
                typedResponse.log = log;
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.url = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.permissions = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.provider = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AppUpdateEventResponse> appUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPUPDATE_EVENT));
        return appUpdateEventFlowable(filter);
    }

    public RemoteFunctionCall<String> providers(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROVIDERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setApp(String name, String url, List<BigInteger> permissions) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(url), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(permissions, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAppRaw(String name, String url, List<BigInteger> permissions, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(url), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(permissions, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<byte[], byte[], String, String, List<BigInteger>>> getApp(String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes2>() {}, new TypeReference<Bytes3>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple5<byte[], byte[], String, String, List<BigInteger>>>(function,
                new Callable<Tuple5<byte[], byte[], String, String, List<BigInteger>>>() {
                    @Override
                    public Tuple5<byte[], byte[], String, String, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<byte[], byte[], String, String, List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                convertToNative((List<Uint256>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> deleteApp() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETEAPP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteAppRaw(String provider, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETEAPPRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getProviders() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPROVIDERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> createAgreement(String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEAGREEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createAgreementRaw(String provider, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEAGREEMENTRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeAgreement(String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEAGREEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeAgreementRaw(String provider, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEAGREEMENTRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getUserAgreementsByAddress(String user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERAGREEMENTSBYADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getUserAgreementsByOcpi(byte[] countryCode, byte[] partyId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERAGREEMENTSBYOCPI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes2(countryCode), 
                new org.web3j.abi.datatypes.generated.Bytes3(partyId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> hasUserAgreementByAddress(String user, String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASUSERAGREEMENTBYADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user), 
                new org.web3j.abi.datatypes.Address(provider)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> hasUserAgreementByOcpi(byte[] countryCode, byte[] partyId, String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASUSERAGREEMENTBYOCPI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes2(countryCode), 
                new org.web3j.abi.datatypes.generated.Bytes3(partyId), 
                new org.web3j.abi.datatypes.Address(provider)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static Permissions load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Permissions(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Permissions load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Permissions(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Permissions load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Permissions(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Permissions load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Permissions(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Permissions> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String registryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddress)));
        return deployRemoteCall(Permissions.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Permissions> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String registryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddress)));
        return deployRemoteCall(Permissions.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Permissions> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String registryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddress)));
        return deployRemoteCall(Permissions.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Permissions> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String registryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddress)));
        return deployRemoteCall(Permissions.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class AppAgreementEventResponse extends BaseEventResponse {
        public String user;

        public String provider;
    }

    public static class AppUpdateEventResponse extends BaseEventResponse {
        public String name;

        public String url;

        public List<BigInteger> permissions;

        public String provider;
    }
}
