package snc.openchargingnetwork.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes2;
import org.web3j.abi.datatypes.generated.Bytes3;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class Permissions extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50604051613c2d380380613c2d8339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050613b99806100946000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80635c0f93bb11610097578063a45469d111610066578063a45469d114610905578063b5d9f61f14610aeb578063cdebf96e14610b67578063edc922a914610bab576100f5565b80635c0f93bb146107845780635fce7138146107e9578063674a730d146107f3578063884eb949146108c1576100f5565b8063340f1e7c116100d3578063340f1e7c146105b357806338f7e0e11461061857806350f3fc81146106b15780635a9da7f11461071f576100f5565b806315a52302146100fa57806323db5e8c146102fb57806329cc2b23146103ac575b600080fd5b61013c6004803603602081101561011057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c0a565b60405180867dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001857cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156102125780820151818401526020810190506101f7565b50505050905090810190601f16801561023f5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b8381101561027857808201518184015260208101905061025d565b50505050905090810190601f1680156102a55780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019060200280838360005b838110156102e15780820151818401526020810190506102c6565b505050509050019850505050505050505060405180910390f35b6103926004803603606081101561031157600080fd5b8101908080357dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919080357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111ed565b604051808215151515815260200191505060405180910390f35b6105b1600480360360c08110156103c257600080fd5b81019080803590602001906401000000008111156103df57600080fd5b8201836020820111156103f157600080fd5b8035906020019184600183028401116401000000008311171561041357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561047657600080fd5b82018360208201111561048857600080fd5b803590602001918460018302840111640100000000831117156104aa57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561050d57600080fd5b82018360208201111561051f57600080fd5b8035906020019184602083028401116401000000008311171561054157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803560ff1690602001909291908035906020019092919080359060200190929190505050611659565b005b610616600480360360808110156105c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff1690602001909291908035906020019092919080359060200190929190505050611886565b005b61065a6004803603602081101561062e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a0b565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561069d578082015181840152602081019050610682565b505050509050019250505060405180910390f35b6106dd600480360360208110156106c757600080fd5b8101908080359060200190929190505050611ad8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6107826004803603608081101561073557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff1690602001909291908035906020019092919080359060200190929190505050611b14565b005b6107e76004803603608081101561079a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff1690602001909291908035906020019092919080359060200190929190505050611c98565b005b6107f1611e1d565b005b61086a6004803603604081101561080957600080fd5b8101908080357dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919080357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050611e28565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108ad578082015181840152602081019050610892565b505050509050019250505060405180910390f35b610903600480360360208110156108d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122ce565b005b610ae96004803603606081101561091b57600080fd5b810190808035906020019064010000000081111561093857600080fd5b82018360208201111561094a57600080fd5b8035906020019184600183028401116401000000008311171561096c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156109cf57600080fd5b8201836020820111156109e157600080fd5b80359060200191846001830284011164010000000083111715610a0357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610a6657600080fd5b820183602082011115610a7857600080fd5b80359060200191846020830284011164010000000083111715610a9a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506122db565b005b610b4d60048036036040811015610b0157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122ec565b604051808215151515815260200191505060405180910390f35b610ba960048036036020811015610b7d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612380565b005b610bb361238d565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610bf6578082015181840152602081019050610bdb565b505050509050019250505060405180910390f35b60008060608060606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df516128876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b158015610cb057600080fd5b505afa158015610cc4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060e0811015610cee57600080fd5b81019080805190602001909291908051906020019092919080516040519392919084640100000000821115610d2257600080fd5b83820191506020820185811115610d3857600080fd5b8251866020820283011164010000000082111715610d5557600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610d8c578082015181840152602081019050610d71565b5050505090500160405260200180516040519392919084640100000000821115610db557600080fd5b83820191506020820185811115610dcb57600080fd5b8251866020820283011164010000000082111715610de857600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610e1f578082015181840152602081019050610e04565b5050505090500160405260200180516040519392919084640100000000821115610e4857600080fd5b83820191506020820185811115610e5e57600080fd5b8251866020820283011164010000000082111715610e7b57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610eb2578082015181840152602081019050610e97565b505050509050016040526020018051906020019092919080516040519392919084640100000000821115610ee557600080fd5b83820191506020820185811115610efb57600080fd5b8251866001820283011164010000000082111715610f1857600080fd5b8083526020830192505050908051906020019080838360005b83811015610f4c578082015181840152602081019050610f31565b50505050905090810190601f168015610f795780820380516001836020036101000a031916815260200191505b506040525050509091929350909192509091509050508095508196505050600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561106d5780601f106110425761010080835404028352916020019161106d565b820191906000526020600020905b81548152906001019060200180831161105057829003601f168201915b50505050509250600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561114a5780601f1061111f5761010080835404028352916020019161114a565b820191906000526020600020905b81548152906001019060200180831161112d57829003601f168201915b50505050509150600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054806020026020016040519081016040528092919081815260200182805480156111dd57602002820191906000526020600020905b8154815260200190600101908083116111c9575b5050505050905091939590929450565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5b5ffbb86866040518363ffffffff1660e01b815260040180837dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001827cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019250505060006040518083038186803b1580156112ec57600080fd5b505afa158015611300573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060c081101561132a57600080fd5b81019080805190602001909291908051604051939291908464010000000082111561135457600080fd5b8382019150602082018581111561136a57600080fd5b825186602082028301116401000000008211171561138757600080fd5b8083526020830192505050908051906020019060200280838360005b838110156113be5780820151818401526020810190506113a3565b50505050905001604052602001805160405193929190846401000000008211156113e757600080fd5b838201915060208201858111156113fd57600080fd5b825186602082028301116401000000008211171561141a57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015611451578082015181840152602081019050611436565b505050509050016040526020018051604051939291908464010000000082111561147a57600080fd5b8382019150602082018581111561149057600080fd5b82518660208202830111640100000000821117156114ad57600080fd5b8083526020830192505050908051906020019060200280838360005b838110156114e45780820151818401526020810190506114c9565b50505050905001604052602001805190602001909291908051604051939291908464010000000082111561151757600080fd5b8382019150602082018581111561152d57600080fd5b825186600182028301116401000000008211171561154a57600080fd5b8083526020830192505050908051906020019080838360005b8381101561157e578082015181840152602081019050611563565b50505050905090810190601f1680156115ab5780820380516001836020036101000a031916815260200191505b5060405250505090919293509091925090915090505080915050600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169150509392505050565b60008686866040516020018084805190602001908083835b602083106116945780518252602082019150602081019050602083039250611671565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083106116e557805182526020820191506020810190506020830392506116c2565b6001836020036101000a038019825116818451168082178552505050505050905001828051906020019060200280838360005b83811015611733578082015181840152602081019050611718565b505050509050019350505050604051602081830303815290604052805190602001209050600060016040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250836040516020018083805190602001908083835b602083106117c857805182526020820191506020810190506020830392506117a5565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040528051906020012086868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611864573d6000803e3d6000fd5b50505060206040510351905061187c8189898961241b565b5050505050505050565b600084604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401915050604051602081830303815290604052805190602001209050600060016040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250836040516020018083805190602001908083835b60208310611951578051825260208201915060208101905060208303925061192e565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040528051906020012086868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156119ed573d6000803e3d6000fd5b505050602060405103519050611a038187612a17565b505050505050565b6060600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611acc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a82575b50505050509050919050565b60018181548110611ae557fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600084604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401915050604051602081830303815290604052805190602001209050600060016040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250836040516020018083805190602001908083835b60208310611bdf5780518252602082019150602081019050602083039250611bbc565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040528051906020012086868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611c7b573d6000803e3d6000fd5b505050602060405103519050611c9081612fa6565b505050505050565b600084604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401915050604051602081830303815290604052805190602001209050600060016040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250836040516020018083805190602001908083835b60208310611d635780518252602082019150602081019050602083039250611d40565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040528051906020012086868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611dff573d6000803e3d6000fd5b505050602060405103519050611e1581876133e5565b505050505050565b611e2633612fa6565b565b606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5b5ffbb85856040518363ffffffff1660e01b815260040180837dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001827cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019250505060006040518083038186803b158015611f2857600080fd5b505afa158015611f3c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060c0811015611f6657600080fd5b810190808051906020019092919080516040519392919084640100000000821115611f9057600080fd5b83820191506020820185811115611fa657600080fd5b8251866020820283011164010000000082111715611fc357600080fd5b8083526020830192505050908051906020019060200280838360005b83811015611ffa578082015181840152602081019050611fdf565b505050509050016040526020018051604051939291908464010000000082111561202357600080fd5b8382019150602082018581111561203957600080fd5b825186602082028301116401000000008211171561205657600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561208d578082015181840152602081019050612072565b50505050905001604052602001805160405193929190846401000000008211156120b657600080fd5b838201915060208201858111156120cc57600080fd5b82518660208202830111640100000000821117156120e957600080fd5b8083526020830192505050908051906020019060200280838360005b83811015612120578082015181840152602081019050612105565b50505050905001604052602001805190602001909291908051604051939291908464010000000082111561215357600080fd5b8382019150602082018581111561216957600080fd5b825186600182028301116401000000008211171561218657600080fd5b8083526020830192505050908051906020019080838360005b838110156121ba57808201518184015260208101905061219f565b50505050905090810190601f1680156121e75780820380516001836020036101000a031916815260200191505b5060405250505090919293509091925090915090505080915050600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156122c057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612276575b505050505091505092915050565b6122d83382612a17565b50565b6122e73384848461241b565b505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61238a33826133e5565b50565b6060600180548060200260200160405190810160405280929190818152602001828054801561241157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116123c7575b5050505050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166388cf72a0866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b1580156124bb57600080fd5b505afa1580156124cf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060408110156124f957600080fd5b81019080805190602001909291908051604051939291908464010000000082111561252357600080fd5b8382019150602082018581111561253957600080fd5b825186600182028301116401000000008211171561255657600080fd5b8083526020830192505050908051906020019080838360005b8381101561258a57808201518184015260208101905061256f565b50505050905090810190601f1680156125b75780820380516001836020036101000a031916815260200191505b50604052505050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f815260200180613b26603f913960400191505060405180910390fd5b60008251116126be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4e6f207065726d697373696f6e7320676976656e2e000000000000000000000081525060200191505060405180910390fd5b604051806060016040528085815260200184815260200183815250600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906127349291906138d1565b5060208201518160010190805190602001906127519291906138d1565b50604082015181600201908051906020019061276e929190613951565b5090505060001515600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141561288a5760018590806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f533987f16b883a1fe0783ff9c6c6cedcf97aee0eaf60cc491c7a3e48c9f1b5d784848488604051808060200180602001806020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848103845288818151815260200191508051906020019080838360005b8381101561292957808201518184015260208101905061290e565b50505050905090810190601f1680156129565780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360005b8381101561298f578082015181840152602081019050612974565b50505050905090810190601f1680156129bc5780820380516001836020036101000a031916815260200191505b50848103825286818151815260200191508051906020019060200280838360005b838110156129f85780820151818401526020810190506129dd565b5050505090500197505050505050505060405180910390a15050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166388cf72a0846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b158015612ab757600080fd5b505afa158015612acb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506040811015612af557600080fd5b810190808051906020019092919080516040519392919084640100000000821115612b1f57600080fd5b83820191506020820185811115612b3557600080fd5b8251866001820283011164010000000082111715612b5257600080fd5b8083526020830192505050908051906020019080838360005b83811015612b86578082015181840152602081019050612b6b565b50505050905090810190601f168015612bb35780820380516001836020036101000a031916815260200191505b50604052505050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612c43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613a9b602e913960400191505060405180910390fd5b60011515600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514612cec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180613a4e6023913960400191505060405180910390fd5b60001515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514612dd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613ac96031913960400191505060405180910390fd5b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550507f91aba333be281959a9130cefbc0e18d32a4f1c6bc3a922c7fdb084c1179f413a8383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1505050565b60011515600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461304f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613a71602a913960400191505060405180910390fd5b61305761399e565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561313a5780601f1061310f5761010080835404028352916020019161313a565b820191906000526020600020905b81548152906001019060200180831161311d57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131dc5780601f106131b1576101008083540402835291602001916131dc565b820191906000526020600020905b8154815290600101906020018083116131bf57829003601f168201915b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561323457602002820191906000526020600020905b815481526020019060010190808311613220575b5050505050815250509050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600061328f91906139bf565b60018201600061329f91906139bf565b6002820160006132af9190613a07565b50506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f533987f16b883a1fe0783ff9c6c6cedcf97aee0eaf60cc491c7a3e48c9f1b5d7816040015183604051808060200180602001806020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848103845260008152602001602001848103835260008152602001602001848103825286818151815260200191508051906020019060200280838360005b838110156133cb5780820151818401526020810190506133b0565b505050509050019550505050505060405180910390a15050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166388cf72a0846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b15801561348557600080fd5b505afa158015613499573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060408110156134c357600080fd5b8101908080519060200190929190805160405193929190846401000000008211156134ed57600080fd5b8382019150602082018581111561350357600080fd5b825186600182028301116401000000008211171561352057600080fd5b8083526020830192505050908051906020019080838360005b83811015613554578082015181840152602081019050613539565b50505050905090810190601f1680156135815780820380516001836020036101000a031916815260200191505b50604052505050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613a9b602e913960400191505060405180910390fd5b60011515600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146136ba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180613a4e6023913960400191505060405180910390fd5b60011515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146137a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613afa602c913960400191505060405180910390fd5b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f91aba333be281959a9130cefbc0e18d32a4f1c6bc3a922c7fdb084c1179f413a8383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061391257805160ff1916838001178555613940565b82800160010185558215613940579182015b8281111561393f578251825591602001919060010190613924565b5b50905061394d9190613a28565b5090565b82805482825590600052602060002090810192821561398d579160200282015b8281111561398c578251825591602001919060010190613971565b5b50905061399a9190613a28565b5090565b60405180606001604052806060815260200160608152602001606081525090565b50805460018160011615610100020316600290046000825580601f106139e55750613a04565b601f016020900490600052602060002090810190613a039190613a28565b5b50565b5080546000825590600052602060002090810190613a259190613a28565b50565b613a4a91905b80821115613a46576000816000905550600101613a2e565b5090565b9056fe50726f766964657220686173206e6f207265676973746572656420536572766963652e43616e6e6f742064656c6574652073657276696365207468617420646f6573206e6f742065786973742e53657276696365207573657220686173206e6f207061727479206c697374696e6720696e2052656769737472792e41677265656d656e7420616c7265616479206d616465206265747765656e207573657220616e642070726f76696465722e4e6f2041677265656d656e74206d616465206265747765656e207573657220616e642070726f76696465722e547279696e6720746f2072656769737465722061207365727669636520776974686f7574207061727479206c697374696e6720696e2052656769737472792ea265627a7a723158207a1ae39705dcaf020cf6abf6f43eb996d9647cbe073a901e49c5f0761617e14c64736f6c634300050f0032";

    public static final String FUNC_PROVIDERS = "providers";

    public static final String FUNC_SETSERVICE = "setService";

    public static final String FUNC_SETSERVICERAW = "setServiceRaw";

    public static final String FUNC_GETSERVICE = "getService";

    public static final String FUNC_DELETESERVICE = "deleteService";

    public static final String FUNC_DELETESERVICERAW = "deleteServiceRaw";

    public static final String FUNC_GETPROVIDERS = "getProviders";

    public static final String FUNC_CREATEAGREEMENT = "createAgreement";

    public static final String FUNC_CREATEAGREEMENTRAW = "createAgreementRaw";

    public static final String FUNC_REVOKEAGREEMENT = "revokeAgreement";

    public static final String FUNC_REVOKEAGREEMENTRAW = "revokeAgreementRaw";

    public static final String FUNC_GETUSERAGREEMENTSBYADDRESS = "getUserAgreementsByAddress";

    public static final String FUNC_GETUSERAGREEMENTSBYOCPI = "getUserAgreementsByOcpi";

    public static final String FUNC_HASUSERAGREEMENTBYADDRESS = "hasUserAgreementByAddress";

    public static final String FUNC_HASUSERAGREEMENTBYOCPI = "hasUserAgreementByOcpi";

    public static final Event SERVICEAGREEMENT_EVENT = new Event("ServiceAgreement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SERVICEUPDATE_EVENT = new Event("ServiceUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Address>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("73799", "0xa72479612436D1f9df5FA975baFB9ae74529aB0E");
        _addresses.put("9", "0xf25186B5081Ff5cE73482AD761DB0eB0d25abfBF");
    }

    @Deprecated
    protected Permissions(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Permissions(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Permissions(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Permissions(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ServiceAgreementEventResponse> getServiceAgreementEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SERVICEAGREEMENT_EVENT, transactionReceipt);
        ArrayList<ServiceAgreementEventResponse> responses = new ArrayList<ServiceAgreementEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ServiceAgreementEventResponse typedResponse = new ServiceAgreementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.provider = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ServiceAgreementEventResponse> serviceAgreementEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ServiceAgreementEventResponse>() {
            @Override
            public ServiceAgreementEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SERVICEAGREEMENT_EVENT, log);
                ServiceAgreementEventResponse typedResponse = new ServiceAgreementEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.provider = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ServiceAgreementEventResponse> serviceAgreementEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SERVICEAGREEMENT_EVENT));
        return serviceAgreementEventFlowable(filter);
    }

    public List<ServiceUpdateEventResponse> getServiceUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SERVICEUPDATE_EVENT, transactionReceipt);
        ArrayList<ServiceUpdateEventResponse> responses = new ArrayList<ServiceUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ServiceUpdateEventResponse typedResponse = new ServiceUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.url = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.permissions = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.provider = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ServiceUpdateEventResponse> serviceUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ServiceUpdateEventResponse>() {
            @Override
            public ServiceUpdateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SERVICEUPDATE_EVENT, log);
                ServiceUpdateEventResponse typedResponse = new ServiceUpdateEventResponse();
                typedResponse.log = log;
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.url = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.permissions = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.provider = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ServiceUpdateEventResponse> serviceUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SERVICEUPDATE_EVENT));
        return serviceUpdateEventFlowable(filter);
    }

    public RemoteFunctionCall<String> providers(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROVIDERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setService(String name, String url, List<BigInteger> permissions) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSERVICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(url), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(permissions, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setServiceRaw(String name, String url, List<BigInteger> permissions, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSERVICERAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(url), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(permissions, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<byte[], byte[], String, String, List<BigInteger>>> getService(String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSERVICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes2>() {}, new TypeReference<Bytes3>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple5<byte[], byte[], String, String, List<BigInteger>>>(function,
                new Callable<Tuple5<byte[], byte[], String, String, List<BigInteger>>>() {
                    @Override
                    public Tuple5<byte[], byte[], String, String, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<byte[], byte[], String, String, List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                convertToNative((List<Uint256>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> deleteService() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETESERVICE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteServiceRaw(String provider, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETESERVICERAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getProviders() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPROVIDERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> createAgreement(String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEAGREEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createAgreementRaw(String provider, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEAGREEMENTRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeAgreement(String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEAGREEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeAgreementRaw(String provider, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEAGREEMENTRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(provider), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getUserAgreementsByAddress(String user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERAGREEMENTSBYADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getUserAgreementsByOcpi(byte[] countryCode, byte[] partyId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERAGREEMENTSBYOCPI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes2(countryCode), 
                new org.web3j.abi.datatypes.generated.Bytes3(partyId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> hasUserAgreementByAddress(String user, String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASUSERAGREEMENTBYADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user), 
                new org.web3j.abi.datatypes.Address(provider)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> hasUserAgreementByOcpi(byte[] countryCode, byte[] partyId, String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASUSERAGREEMENTBYOCPI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes2(countryCode), 
                new org.web3j.abi.datatypes.generated.Bytes3(partyId), 
                new org.web3j.abi.datatypes.Address(provider)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static Permissions load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Permissions(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Permissions load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Permissions(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Permissions load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Permissions(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Permissions load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Permissions(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Permissions> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String registryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddress)));
        return deployRemoteCall(Permissions.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Permissions> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String registryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddress)));
        return deployRemoteCall(Permissions.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Permissions> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String registryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddress)));
        return deployRemoteCall(Permissions.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Permissions> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String registryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddress)));
        return deployRemoteCall(Permissions.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ServiceAgreementEventResponse extends BaseEventResponse {
        public String user;

        public String provider;
    }

    public static class ServiceUpdateEventResponse extends BaseEventResponse {
        public String name;

        public String url;

        public List<BigInteger> permissions;

        public String provider;
    }
}
